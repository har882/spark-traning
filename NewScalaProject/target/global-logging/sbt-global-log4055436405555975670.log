[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\harsh\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\harsh\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.9 (Oracle Corporation Java 1.8.0_291)
[debug]       Load.loadUnit: plugins took 87.7262ms
[debug]       Load.loadUnit: defsScala took 0.4036ms
[debug] [Loading] Scanning directory C:\Users\harsh\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\harsh\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.1698 ms
[debug]           Load.resolveProject(global-plugins) took 48.2544ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\harsh\.sbt\1.0\plugins, plugins: List(<none>))) took 98.8662ms
[debug] [Loading] Done in C:\Users\harsh\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 120.9896ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3091ms
[debug]     Load.loadUnit(file:/C:/Users/harsh/.sbt/1.0/plugins/, ...) took 217.3709ms
[debug]   Load.apply: load took 4214.5651ms
[debug]   Load.apply: resolveProjects took 5.3128ms
[debug]   Load.apply: finalTransforms took 50.2877ms
[debug]   Load.apply: config.delegates took 6.1036ms
[debug]   Load.apply: Def.make(settings)... took 12936.3669ms
[debug]   Load.apply: structureIndex took 103.3389ms
[debug]   Load.apply: mkStreams took 2.0157ms
[info] loading global plugins from C:\Users\harsh\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 42599.9383ms
[debug]           Load.loadUnit: plugins took 28.4569ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\harsh\IdeaProjects\NewScalaProject\project
[debug]             Load.loadUnit: mkEval took 8.1915ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\harsh\IdeaProjects\NewScalaProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4228 ms
[info] loading settings for project newscalaproject-build from idea.sbt ...
[debug]               Load.resolveProject(newscalaproject-build) took 4.9909ms
[debug]             Load.loadTransitive: finalizeProject(Project(id newscalaproject-build, base: C:\Users\harsh\IdeaProjects\NewScalaProject\project, plugins: List(<none>))) took 6.8404ms
[debug] [Loading] Done in C:\Users\harsh\IdeaProjects\NewScalaProject\project, returning: (newscalaproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2119.3964ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.6766ms
[debug]         Load.loadUnit(file:/C:/Users/harsh/IdeaProjects/NewScalaProject/project/, ...) took 2154.4525ms
[debug]       Load.apply: load took 2155.5489ms
[debug]       Load.apply: resolveProjects took 0.1073ms
[debug]       Load.apply: finalTransforms took 11.3178ms
[debug]       Load.apply: config.delegates took 0.4267ms
[debug]       Load.apply: Def.make(settings)... took 66.9711ms
[debug]       Load.apply: structureIndex took 25.9275ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from C:\Users\harsh\IdeaProjects\NewScalaProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4434.5554ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\harsh\IdeaProjects\NewScalaProject
[debug]       Load.loadUnit: mkEval took 0.3268ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\harsh\IdeaProjects\NewScalaProject, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8979 ms
[info] loading settings for project newscalaproject from build.sbt ...
[debug]         Load.resolveProject(newscalaproject) took 33.8103ms
[debug]       Load.loadTransitive: finalizeProject(Project(id newscalaproject, base: C:\Users\harsh\IdeaProjects\NewScalaProject, plugins: List(<none>))) took 37.281ms
[debug] [Loading] Done in C:\Users\harsh\IdeaProjects\NewScalaProject, returning: (newscalaproject)
[debug]     Load.loadUnit: loadedProjectsRaw took 1763.7367ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.3494ms
[debug]   Load.loadUnit(file:/C:/Users/harsh/IdeaProjects/NewScalaProject/, ...) took 6219.5998ms
[debug] Load.apply: load took 6221.056ms
[debug] Load.apply: resolveProjects took 0.1272ms
[debug] Load.apply: finalTransforms took 24.1791ms
[debug] Load.apply: config.delegates took 0.3139ms
[debug] Load.apply: Def.make(settings)... took 72.1948ms
[debug] Load.apply: structureIndex took 18.602ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to NewScalaProject (in build file:/C:/Users/harsh/IdeaProjects/NewScalaProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57214 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57214, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to NewScalaProject (in build file:/C:/Users/harsh/IdeaProjects/NewScalaProject/)
[debug] > Exec(idea-shell, None, None)
